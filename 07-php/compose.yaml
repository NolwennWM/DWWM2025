# このバージョンでは、データのセキュリティ保護に.env を使用します。
services:
  web:
    build: .
    depends_on:
      - bddsql
      - bddnosql
    container_name: serverApacheCoursPHP
    restart: unless-stopped
    ports:
      - "8090:80"
    volumes:
      - .:/var/www/html
    environment:
      - ALLOW_OVERRIDE=true
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
  bddsql:
    image: mariadb
    container_name: serverMariaDBCoursPHP
    restart: unless-stopped
    environment:
      - MARIADB_ROOT_PASSWORD=${DB_PASSWORD}
    ports:
      - "3390:3306"
    # 一番下に宣言されたボリュームにより、コンポーズがダウンしているときにデータベースデータを保持できます。
    # エントリポイント バインド マウントを使用すると、Compose が起動するとすぐに SQL ファイルを読み込むことができます。
    volumes:
      - mariadb_data:/var/lib/mysql
      - ./ressources/database:/docker-entrypoint-initdb.d
  phpmyadmin:
    image: phpmyadmin
    container_name: serverPHPMyAdminCoursPHP
    restart: unless-stopped
    depends_on:
      - bddsql
    environment:
      PMA_HOST: ${DB_HOST}
      PMA_USER: ${DB_USER}
      PMA_PASSWORD: ${DB_PASSWORD}
    ports:
      - "8091:80"
  bddnosql:
    image: mongo
    container_name: serverMongoCoursPHP
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${DB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${DB_PASSWORD}
    ports:
      - "27090:27017"
  mongoexpress:
    container_name: serverMongoExpressCoursPHP
    image: mongo-express
    ports:
      - "8092:8081"
    depends_on:
      - bddnosql
    restart: unless-stopped
    environment:
      - ME_CONFIG_MONGODB_SERVER=${DB_HOST_MONGO}
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${DB_USER}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${DB_PASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=${DB_USER}
      - ME_CONFIG_BASICAUTH_PASSWORD=${DB_PASSWORD}
# これにより、コンテナの外部にデータを保存できる領域であるボリュームを Docker 内に作成できるようになります。
volumes:
  mariadb_data: